import tweepy
 import re
 from textblob import TextBlob
 from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
 import matplotlib.pyplot as plt
 import pandas as pd
 import numpy as np
 import streamlit as st
 
 # --- Streamlit page config ---
 st.set_page_config(page_title="Twitter Emotion Analyzer", layout="wide")
 st.title("üìä Decoding Emotions Through Sentiment Analysis of Twitter Conversations")
 
 # --- Twitter API Keys (Enter yours here) ---
 API_KEY = 'your-api-key'
 API_SECRET_KEY = 'your-api-secret-key'
 ACCESS_TOKEN = 'your-access-token'
 ACCESS_TOKEN_SECRET = 'your-access-token-secret'
 
 # --- Authenticate with Twitter ---
 auth = tweepy.OAuthHandler(API_KEY, API_SECRET_KEY)
 auth.set_access_token(ACCESS_TOKEN, ACCESS_TOKEN_SECRET)
 api = tweepy.API(auth)
 
 # --- Functions ---
 def preprocess_text(text):
     text = re.sub(r'http\S+', '', text)
     text = re.sub(r'[^A-Za-z\s]', '', text)
     return text.lower().strip()
 
 def analyze_sentiment_textblob(text):
     return TextBlob(text).sentiment.polarity
 
 analyzer = SentimentIntensityAnalyzer()
 def analyze_sentiment_vader(text):
     return analyzer.polarity_scores(text)['compound']
 
 def fetch_tweets(query, count):
     tweets = api.search_tweets(q=query, count=count, lang="en", tweet_mode='extended')
     return [(tweet.full_text, tweet.created_at) for tweet in tweets]
 
 # --- User Input ---
 query = st.text_input("Enter keyword or hashtag to search tweets:", "#mentalhealth")
 count = st.slider("Number of tweets to analyze", min_value=10, max_value=300, value=100)
 
 if st.button("Analyze"):
     with st.spinner("Fetching and analyzing tweets..."):
         tweet_data = fetch_tweets(query, count)
         texts = [preprocess_text(t[0]) for t in tweet_data]
         dates = [t[1] for t in tweet_data]
 
         sentiments_textblob = [analyze_sentiment_textblob(t) for t in texts]
         sentiments_vader = [analyze_sentiment_vader(t) for t in texts]
 
         df = pd.DataFrame({
             'Tweet': texts,
             'Date': dates,
             'Sentiment_TextBlob': sentiments_textblob,
             'Sentiment_VADER': sentiments_vader
         })
 
         # --- Sentiment Statistics ---
         st.subheader("üìà Sentiment Summary")
         st.write("Average Sentiment (TextBlob):", round(np.mean(sentiments_textblob), 3))
         st.write("Average Sentiment (VADER):", round(np.mean(sentiments_vader), 3))
 
         # --- Visualizations ---
         st.subheader("üìä Sentiment Distributions")
         st.pyplot(plt.figure(figsize=(8, 4)))
         plt.hist(sentiments_vader, bins=20, alpha=0.7, label='VADER')
         plt.hist(sentiments_textblob, bins=20, alpha=0.7, label='TextBlob')
         plt.title("Histogram of Sentiment Scores")
         plt.legend()
         plt.grid(True)
         st.pyplot(plt.gcf())
 
         # --- Sentiment by Time ---
         df['Hour'] = pd.to_datetime(df['Date']).dt.hour
         st.subheader("‚è∞ Sentiment by Hour of the Day (VADER)")
         hourly_sentiment = df.groupby('Hour')['Sentiment_VADER'].mean()
         st.line_chart(hourly_sentiment)
 
         # --- Display Raw Data ---
         st.subheader("üìù Sample Tweets and Sentiments")
         st.dataframe(df[['Tweet', 'Sentiment_VADER', 'Sentiment_TextBlob']].head(10))
